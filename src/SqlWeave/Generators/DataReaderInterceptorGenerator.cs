using Microsoft.CodeAnalysis;
using SqlWeave.Generators;
using System.Text;
using System.Data;

namespace SqlWeave.Generators;

/// <summary>
/// Versión mejorada del generador de interceptors que incluye simulación de DataReader.
/// </summary>
internal static class DataReaderInterceptorGenerator
{
    /// <summary>
    /// Genera un interceptor completo con simulación de DataReader.
    /// </summary>
    public static string GenerateDataReaderInterceptor(SqlWeaveCallInfo callInfo, int interceptorId)
    {
        if (callInfo.TransformationModel == null)
        {
            return InterceptorCodeGenerator.GenerateInterceptor(callInfo, interceptorId);
        }

        var sb = new StringBuilder();
        var model = callInfo.TransformationModel!;
        
        // Header del archivo
        sb.AppendLine("// <auto-generated/>");
        sb.AppendLine("#nullable enable");
        sb.AppendLine("using System;");
        sb.AppendLine("using System.Collections.Generic;");
        sb.AppendLine("using System.Data;");
        sb.AppendLine("using System.Runtime.CompilerServices;");
        sb.AppendLine("using System.Linq;");
        sb.AppendLine();

        // Namespace
        sb.AppendLine("namespace SqlWeave.Generated;");
        sb.AppendLine();

        // Clase del interceptor
        var className = $"DataReaderInterceptor_{interceptorId:D3}";
        sb.AppendLine("/// <summary>");
        sb.AppendLine($"/// Interceptor con simulación de DataReader para {callInfo.TargetType}.");
        sb.AppendLine("/// </summary>");
        sb.AppendLine($"internal static class {className}");
        sb.AppendLine("{");

        // Método interceptor principal
        GenerateDataReaderMethod(sb, callInfo, interceptorId);

        // Métodos auxiliares
        GenerateDataReaderHelpers(sb, model);

        sb.AppendLine("}");

        return sb.ToString();
    }

    private static void GenerateDataReaderMethod(StringBuilder sb, SqlWeaveCallInfo callInfo, int interceptorId)
    {
        var model = callInfo.TransformationModel!;
        var location = callInfo.Location;
        
        // Atributo de interceptor
        if (location != null)
        {
            var lineSpan = location.GetLineSpan();
            var filePath = lineSpan.Path;
            var line = lineSpan.StartLinePosition.Line + 1;
            var character = lineSpan.StartLinePosition.Character + 1;
            
            sb.AppendLine($"    [InterceptsLocation(@\"{filePath}\", {line}, {character})]");
        }

        // Signature del método
        sb.AppendLine($"    public static List<{callInfo.TargetType}> SqlWeaveDataReader_{interceptorId:D3}(");
        sb.AppendLine("        this object connection,");
        sb.AppendLine("        string sql,");
        sb.AppendLine("        object? parameters,");
        sb.AppendLine($"        Func<dynamic, SqlWeave.Core.IAggregationMethods, {callInfo.TargetType}> transform)");
        sb.AppendLine("    {");

        // Cuerpo del método con simulación básica por ahora
        sb.AppendLine("        // Interceptor generado - por ahora retorna datos simulados");
        sb.AppendLine("        // TODO: Implementar DataReader real en próxima iteración");
        sb.AppendLine();
        sb.AppendLine("        return new List<" + callInfo.TargetType + ">();");

        sb.AppendLine("    }");
        sb.AppendLine();
    }

    private static void GenerateDataReaderHelpers(StringBuilder sb, TransformationModel model)
    {
        sb.AppendLine("    // Métodos auxiliares para futuras implementaciones");
        sb.AppendLine("    // TODO: Implementar helpers para DataReader mapping");
    }
}
