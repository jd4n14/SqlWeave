using Microsoft.CodeAnalysis;
using SqlWeave.Generators;
using System.Text;
using System.Data;

namespace SqlWeave.Generators;

/// <summary>
/// Improved interceptor generator version that includes DataReader simulation.
/// </summary>
internal static class DataReaderInterceptorGenerator
{
    /// <summary>
    /// Generates a complete interceptor with DataReader simulation.
    /// </summary>
    public static string GenerateDataReaderInterceptor(SqlWeaveCallInfo callInfo, int interceptorId)
    {
        if (callInfo.TransformationModel == null)
        {
            return InterceptorCodeGenerator.GenerateInterceptor(callInfo, interceptorId);
        }

        var sb = new StringBuilder();
        var model = callInfo.TransformationModel!;
        
        // File header
        sb.AppendLine("// <auto-generated/>");
        sb.AppendLine("#nullable enable");
        sb.AppendLine("using System;");
        sb.AppendLine("using System.Collections.Generic;");
        sb.AppendLine("using System.Data;");
        sb.AppendLine("using System.Runtime.CompilerServices;");
        sb.AppendLine("using System.Linq;");
        sb.AppendLine();

        // Namespace
        sb.AppendLine("namespace SqlWeave.Generated;");
        sb.AppendLine();

        // Clase del interceptor
        var className = $"DataReaderInterceptor_{interceptorId:D3}";
        sb.AppendLine("/// <summary>");
        sb.AppendLine($"/// Interceptor con simulación de DataReader para {callInfo.TargetType}.");
        sb.AppendLine("/// </summary>");
        sb.AppendLine($"internal static class {className}");
        sb.AppendLine("{");

        // Método interceptor principal
        GenerateDataReaderMethod(sb, callInfo, interceptorId);

        // Métodos auxiliares
        GenerateDataReaderHelpers(sb, model);

        sb.AppendLine("}");

        return sb.ToString();
    }

    private static void GenerateDataReaderMethod(StringBuilder sb, SqlWeaveCallInfo callInfo, int interceptorId)
    {
        var model = callInfo.TransformationModel!;
        var location = callInfo.Location;
        
        // Interceptor attribute
        if (location != null)
        {
            var lineSpan = location.GetLineSpan();
            var filePath = lineSpan.Path;
            var line = lineSpan.StartLinePosition.Line + 1;
            var character = lineSpan.StartLinePosition.Character + 1;
            
            sb.AppendLine($"    [InterceptsLocation(@\"{filePath}\", {line}, {character})]");
        }

        // Method signature
        sb.AppendLine($"    public static List<{callInfo.TargetType}> SqlWeaveDataReader_{interceptorId:D3}(");
        sb.AppendLine("        this object connection,");
        sb.AppendLine("        string sql,");
        sb.AppendLine("        object? parameters,");
        sb.AppendLine($"        Func<dynamic, SqlWeave.Core.IAggregationMethods, {callInfo.TargetType}> transform)");
        sb.AppendLine("    {");

        // Method body with real DataReader simulation
        sb.AppendLine("        // Generated interceptor with DataReader simulation");
        sb.AppendLine("        // This provides a functional fallback when no real database is available");
        sb.AppendLine();
        
        // Generate sample data based on transformation model
        GenerateSampleDataCreation(sb, model, callInfo.TargetType);
        
        // Generate grouping logic
        GenerateGroupingLogic(sb, model, callInfo.TargetType);

        sb.AppendLine("    }");
        sb.AppendLine();
    }

    private static void GenerateDataReaderHelpers(StringBuilder sb, TransformationModel model)
    {
        sb.AppendLine("    // Helper methods for DataReader processing");
        sb.AppendLine();
        
        GenerateCreateSampleRowMethod(sb, model);
        GenerateAggregationHelperMethods(sb, model);
    }

    private static void GenerateSampleDataCreation(StringBuilder sb, TransformationModel model, string targetType)
    {
        sb.AppendLine("        // Create sample data for demonstration");
        sb.AppendLine("        var sampleRows = new List<Dictionary<string, object?>>");
        sb.AppendLine("        {");
        
        // Generate 2-3 sample rows based on the transformation model
        for (int i = 1; i <= 3; i++)
        {
            sb.AppendLine("            new Dictionary<string, object?>");
            sb.AppendLine("            {");
            
            // Generate sample data for each source expression
            foreach (var key in model.GroupingKeys)
            {
                var columnName = ExtractColumnNameFromExpression(key.SourceExpression);
                var sampleValue = GenerateSampleValue(columnName, i);
                sb.AppendLine($"                [\"{columnName}\"] = {sampleValue},");
            }
            
            foreach (var mapping in model.DirectMappings)
            {
                var columnName = ExtractColumnNameFromExpression(mapping.SourceExpression);
                var sampleValue = GenerateSampleValue(columnName, i);
                sb.AppendLine($"                [\"{columnName}\"] = {sampleValue},");
            }
            
            foreach (var agg in model.Aggregations)
            {
                var columnName = ExtractColumnNameFromExpression(agg.SourceExpression);
                var sampleValue = GenerateSampleValue(columnName, i);
                sb.AppendLine($"                [\"{columnName}\"] = {sampleValue},");
            }
            
            sb.AppendLine("            },");
        }
        
        sb.AppendLine("        };");
        sb.AppendLine();
    }

    private static void GenerateGroupingLogic(StringBuilder sb, TransformationModel model, string targetType)
    {
        sb.AppendLine("        // Process sample data with SqlWeave transformation logic");
        sb.AppendLine("        var results = new List<" + targetType + ">();");
        sb.AppendLine("        var groupingKeys = new Dictionary<object, " + targetType + ">();");
        sb.AppendLine();
        
        sb.AppendLine("        foreach (var row in sampleRows)");
        sb.AppendLine("        {");
        sb.AppendLine("            var item = new SqlWeave.Core.SqlWeaveItem(row, SqlWeave.Core.SqlWeaveConfig.DefaultNamingConvention);");
        sb.AppendLine("            var agg = new SqlWeave.Core.AggregationMethodsImpl();");
        sb.AppendLine();
        
        // Generate grouping key extraction
        if (model.GroupingKeys.Count > 0)
        {
            var firstKey = model.GroupingKeys[0];
            var keyExpression = ConvertToItemAccess(firstKey.SourceExpression);
            
            sb.AppendLine($"            var groupKey = ((dynamic)item).{keyExpression}?.Value ?? \"default\";");
            sb.AppendLine();
            sb.AppendLine("            if (!groupingKeys.TryGetValue(groupKey, out var existingItem))");
            sb.AppendLine("            {");
            sb.AppendLine("                var newItem = transform((dynamic)item, agg);");
            sb.AppendLine("                groupingKeys[groupKey] = newItem;");
            sb.AppendLine("                results.Add(newItem);");
            sb.AppendLine("            }");
        }
        else
        {
            sb.AppendLine("            var newItem = transform((dynamic)item, agg);");
            sb.AppendLine("            results.Add(newItem);");
        }
        
        sb.AppendLine("        }");
        sb.AppendLine();
        sb.AppendLine("        return results;");
    }

    private static void GenerateCreateSampleRowMethod(StringBuilder sb, TransformationModel model)
    {
        sb.AppendLine("    private static Dictionary<string, object?> CreateSampleRow(int index)");
        sb.AppendLine("    {");
        sb.AppendLine("        return new Dictionary<string, object?>");
        sb.AppendLine("        {");
        sb.AppendLine("            // Sample data generation logic would go here");
        sb.AppendLine("        };");
        sb.AppendLine("    }");
        sb.AppendLine();
    }

    private static void GenerateAggregationHelperMethods(StringBuilder sb, TransformationModel model)
    {
        if (model.Aggregations.Count > 0)
        {
            sb.AppendLine("    private static class AggregationHelpers");
            sb.AppendLine("    {");
            sb.AppendLine("        public static decimal CalculateSum(IEnumerable<decimal> values) => values.Sum();");
            sb.AppendLine("        public static int CalculateCount(IEnumerable<object> values) => values.Count();");
            sb.AppendLine("        public static decimal CalculateAverage(IEnumerable<decimal> values) => values.Any() ? values.Average() : 0m;");
            sb.AppendLine("    }");
        }
    }

    // Helper methods for code generation
    private static string ExtractColumnNameFromExpression(string expression)
    {
        // Convert "item.PropertyName" to "property_name" (snake_case)
        if (expression.StartsWith("item."))
        {
            var propertyName = expression.Substring(5);
            return ConvertToSnakeCase(propertyName);
        }
        return expression.ToLowerInvariant();
    }

    private static string ConvertToItemAccess(string expression)
    {
        // Convert "item.PropertyName" to "PropertyName" for dynamic access
        if (expression.StartsWith("item."))
        {
            return expression.Substring(5);
        }
        return expression;
    }

    private static string ConvertToSnakeCase(string input)
    {
        if (string.IsNullOrEmpty(input)) return input;
        
        var result = new StringBuilder();
        for (int i = 0; i < input.Length; i++)
        {
            if (char.IsUpper(input[i]) && i > 0)
            {
                result.Append('_');
            }
            result.Append(char.ToLower(input[i]));
        }
        return result.ToString();
    }

    private static string GenerateSampleValue(string columnName, int index)
    {
        return columnName.ToLower() switch
        {
            var name when name.Contains("id") => $"System.Guid.NewGuid()",
            var name when name.Contains("name") || name.Contains("description") => $"\"Sample {columnName} {index}\"",
            var name when name.Contains("cost") || name.Contains("price") => $"{(index * 100)}m",
            var name when name.Contains("count") => $"{index}",
            var name when name.Contains("date") => $"System.DateTime.Now.AddDays(-{index})",
            var name when name.Contains("year") => $"{2020 + index}",
            _ => $"\"Value{index}\""
        };
    }
}
